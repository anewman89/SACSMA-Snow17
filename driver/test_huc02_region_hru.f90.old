program test_upper_colo
  use snow17_sac

  implicit none



!local variables
  integer :: i,h,ntau,k,m,j,cnt,start_offset,ll
  logical :: spin_up_flag
  integer :: error,isce,num_basin
  !integer :: opt
  real :: rmse,dtuh

!  character(len=1024) :: opt_name
!  character(len=2)    :: huc_02
  character(len=512) :: pt1
  character(len=512) :: pt2

  !variables for SCE
!  real, dimension(:), allocatable   :: a      !parameter set

!  real                              :: af     !objective function value
!  real, dimension(:), allocatable   :: bl     !lower bounds on parameter set
!  real, dimension(:), allocatable   :: bu     !upper bounds on parameter set
!  real, dimension(:), allocatable   :: blp     !
!  real, dimension(:), allocatable   :: bup     !
  real, dimension(58)   :: a      !parameter set
  real                  :: af     !objective function value
  real, dimension(58)   :: bl     !lower bounds on parameter set
  real, dimension(58)   :: bu     !upper bounds on parameter set


!sac-sma state variables
  real              :: uztwc,uzfwc,lztwc,lzfsc,lzfpc,adimc

!previous state for spinup check
  real              :: uztwc_prev,uzfwc_prev,lztwc_prev
  real              :: lzfsc_prev,lzfpc_prev,adimc_prev

!diff variables
  real              :: uztwc_diff,uzfwc_diff,lztwc_diff
  real              :: lzfsc_diff,lzfpc_diff,adimc_diff

!sac-sma output variables
!  real, dimension(:), allocatable    :: qs,qg,eta,tci,route_tci,total_stream

!snow-17 output variables
!  real, dimension(:), allocatable    :: snowh, sneqv, snow, raim_snow17 	!output variables

!sac-sma output variables
  real, dimension(36500)   :: qs,qg,eta,tci,route_tci,total_stream

!snow-17 output variables
  real, dimension(36500)   :: snowh, sneqv, snow, raim_snow17 	!output variables

!snow-17 carry over variables
  real :: tprev				!carry over variable
  real, dimension(19)  :: cs			!carry over variable

!snow-17 surface pressure
  real :: pa

!unit hydrograph
  real,dimension(1000)       :: unit_hydro

!single iteration parameter info
  integer                          :: bid,loc,sid
  integer,dimension(1000)            :: basin,seed
  real,   dimension(1000,49)         :: params

!summation variables for streamflow,other things
  real, dimension(36500)   :: total_tci,total_qg,t_raim

!input parameters after multipliers
  real :: mfmax_in, mfmin_in, uadj_in
  real :: uztwm_in,uzfwm_in,uzk_in,zperc_in,rexp_in
  real :: lztwm_in,lzfsm_in,lzfpm_in,lzsk_in,lzpk_in,pfree_in

!  i = 1
!  do while (i <= 1)
!    call get_command_argument(i,arg)
!    if(len_trim(arg) == 0) exit
!    if(i == 1) sce_fname = arg
!    if(i == 2) read (arg,*) sim_len
!    i = i + 1
!  end do

!set an iter count for testing
  iter = 0


!read namelists
  call read_namelist

!get number of hrus
  call get_num_hru(hru_list)


!allocate variables
!variables that need hru dimension
!  ALLOCATE (year(num_hru,sim_len),STAT=error)
!  ALLOCATE (month(num_hru,sim_len),STAT=error)
!  ALLOCATE (day(num_hru,sim_len),STAT=error)
!  ALLOCATE (hour(num_hru,sim_len),STAT=error)
!  ALLOCATE (jday(num_hru,sim_len),STAT=error)

!  ALLOCATE (pet(num_hru,sim_len),STAT=error)
!  ALLOCATE (precip(num_hru,sim_len),STAT=error)
!  ALLOCATE (swdown(num_hru,sim_len),STAT=error)
!  ALLOCATE (vpd(num_hru,sim_len),STAT=error)
!  ALLOCATE (tmax(num_hru,sim_len),STAT=error)
!  ALLOCATE (tmin(num_hru,sim_len),STAT=error)
!  ALLOCATE (dayl(num_hru,sim_len),STAT=error)
!  ALLOCATE (tair(num_hru,sim_len),STAT=error)


!  ALLOCATE (elev(num_hru),STAT=error)
!  ALLOCATE (lat(num_hru),STAT=error)
!  ALLOCATE (alat(num_hru),STAT=error)
!  ALLOCATE (area_basin(num_hru),STAT=error)


!variables that don't need hru dimension
!  ALLOCATE (streamflow(sim_len),STAT=error)
!  ALLOCATE (sneqv_verif(sim_len),STAT=error)
!  ALLOCATE (qs(sim_len),STAT=error)
!  ALLOCATE (qg(sim_len),STAT=error)
!  ALLOCATE (tci(sim_len),STAT=error)
!  ALLOCATE (route_tci(sim_len),STAT=error)
!  ALLOCATE (eta(sim_len),STAT=error)
!  ALLOCATE (total_stream(sim_len),STAT=error)
!  ALLOCATE (total_tci(sim_len),STAT=error)
!  ALLOCATE (total_qg(sim_len),STAT=error)
!  ALLOCATE (t_raim(sim_len),STAT=error)

!  ALLOCATE (raim_snow17(sim_len),STAT=error)
!  ALLOCATE (raim(sim_len),STAT=error)

!  ALLOCATE (snowh(sim_len),STAT=error)
!  ALLOCATE (sneqv(sim_len),STAT=error)
!  ALLOCATE (snow(sim_len),STAT=error)

!mean fields
!  ALLOCATE (m_pet(sim_len),STAT=error)
!  ALLOCATE (m_precip(sim_len),STAT=error)
!  ALLOCATE (m_sneqv(sim_len),STAT=error)
!  ALLOCATE (m_tair(sim_len),STAT=error)

!allocate space for parameter array
    !!!if running snow-17/sacsma combo without optimizing adc
    !!!need 
!  ALLOCATE (a(58),STAT=error)
!  ALLOCATE (bl(58),STAT=error)
!  ALLOCATE (bu(58),STAT=error)
!  ALLOCATE (init_parms(num_hru,14),STAT=error)
!  ALLOCATE (blp(30),STAT=error)
!  ALLOCATE (bup(30),STAT=error)


!initialize total basin modeled streamflow variables
!and other mean/summation variables
  total_tci = 0.0
  total_qg  = 0.0
  t_raim    = 0.0

!read in verification streamflow data
!this determines the starting point for the calibration based on observed record...
  call read_streamflow(stream_name,sim_len,start_offset)


!get forcing data
!  call read_mopex_forcing(forcing_name,sim_len,year,month,day,hour,precip,pet,raim,tair,streamflow,sneqv_verif,mean_obs)
!  call read_matlab_areal_forcing(forcing_name,sim_len,year,month,day,hour,tmax,tmin,vpd,precip,swdown,dayl,lat)
!  call read_cida_areal_forcing_hru(hru_list,num_hru,forcing_name,start_offset,sim_len,streamflow,&
!                                   year,month,day,hour,tmax,tmin,vpd,precip,swdown,dayl,lat,mean_obs)
!print *,'hrus:',num_hru
  call read_cida_areal_forcing_hru(hru_list,num_hru,forcing_name,start_offset,sim_len)
!get initial parameters

! print *,'here',mean_obs

  call read_init_parms(forcing_name,hru_list)
! print *,'here'
  alat = lat 
!print *,'here'

!calculate potential evapotranspiration via priestley-taylor method since daymet has no wind data
  call julianday()

!moved pet to sce portion to optimize "a" parameter (6/11/2013)
!  call calc_pet_pt(pet)



!  call sce_param_setup(uztwm,uzfwm,uzk,pctim,adimp,zperc,rexp,&
!                       lztwm,lzfsm,lzfpm,lzsk,lzpk,pfree,riva,side,rserv,&
!                       a,bl,bu)

 !print *,'here'
!setup parameter, upper & lower bound arrays
!namelist option for which model combo to run
  call sce_param_setup(a,bl,bu)

!print bounds quick
!    do i=1,58
!      print *,i,'bounds: ',bl(i),bu(i)
!    enddo
!   call sce_param_setup_snow17(a,bl,bu)

! open up ASCII output file for sce
  isce = 50 
  OPEN(unit=isce,FILE=TRIM(sce_fname),FORM='formatted')

!  opt = 1   !opt=1 runs sce code
!call sce
  if(opt .eq. 1) then

    call sceua(a,af,bl,bu,nopt,maxn,kstop,pcento,iseed,&
               ngs,npg,nps,nspl,mings,iniflg,iprint,isce)
  else
     m_sneqv = 0.0
    !get pet for all hrus...
    call calc_pet_pt(a)

    if(val_period .eq. 0)then
      ll = sim_len
    else
      ll = val_length
    endif
    !setup parameters quick
    !which region are we in?
!    huc_02 = forcing_name(32:33)

    !which basin do we want?
!    read(forcing_name(35:43),'(i9)') bid
    bid = gage_id 
    !which seed are we on?
!    read(model_out(42:43),'(i2)') sid
    sid = iseed
    !create optimal parameter file name
!    pt1 = '/d1/anewman/sacsnow17/operational_system/MOPEX_Data/'
!    pt2 = 'mopex_basins_opt.txt'
!    pt1 = '/d2/anewman/hcdn_output/'
!    pt2 = '/hru/region_'
!    opt_name = trim(pt1)//trim(huc_02)//trim(pt2)//trim(huc_02)
!    pt2 = '_opt.txt'
!    opt_name = trim(opt_name)//trim(pt2)

!    opt_name = trim(pt1)//trim(pt2)
!    print *,trim(opt_name)
!    print *,'here'
    open(unit=99,file=opt_name,form='formatted')
    read(99,*) num_basin
    do i = 1,num_basin
      read(99,*) basin(i), seed(i)
      read(99,FMT='(1(F8.3),48(F10.5))') params(i,:)
!print *,basin(i),seed(i)
    enddo
    close(unit=99)
!    print *,'here',bid,huc_02,sid
    do i = 1,num_basin
      if(bid .eq. basin(i) .and. sid .eq. seed(i)) then
	loc = i
      endif
    enddo
!    print *,'here'
    print *,bid,loc,trim(model_out)
    do i = 2,49
      a(i-1) = params(loc,i)
!      print *,params(loc,i)
    enddo

    do h = 1,num_hru
  !set spin up flag,cnt
    spin_up_flag = .true.
    cnt = 0
    !calculate actual parameters for this hru based off of
    !apriori values and multipliers...
    !SNOw-17 parameters
      mfmax_in = a(2)+a(3)*init_parms(h,1)**a(4)
      if(mfmax_in < blp(2)) mfmax_in = blp(2)
      if(mfmax_in > bup(2)) mfmax_in = bup(2)

      mfmin_in = a(5)+a(6)*init_parms(h,2)**a(7)
      if(mfmin_in < blp(3)) mfmin_in = blp(3)
      if(mfmin_in > bup(3)) mfmin_in = bup(3)

      uadj_in  = a(8)+a(9)*init_parms(h,3)**a(10)
      if(uadj_in < blp(4)) uadj_in = blp(4)
      if(uadj_in > bup(4)) uadj_in = bup(4)


      !SAC-SMA parameters
      uztwm_in = a(13)+a(14)*init_parms(h,4)**a(15)
      if(uztwm_in < blp(7)) uztwm_in = blp(7)
      if(uztwm_in > bup(7)) uztwm_in = bup(7)

      uzfwm_in = a(16)+a(17)*init_parms(h,5)**a(18)
      if(uzfwm_in < blp(8)) uzfwm_in = blp(8)
      if(uzfwm_in > bup(8)) uzfwm_in = bup(8)

      uzk_in   = a(28)+a(29)*init_parms(h,9)**a(30)
      if(uzk_in < blp(12)) uzk_in = blp(12)
      if(uzk_in > bup(12)) uzk_in = bup(12)

      zperc_in = a(37)+a(38)*init_parms(h,12)**a(39)
      if(zperc_in < blp(15)) zperc_in = blp(15)
      if(zperc_in > bup(15)) zperc_in = bup(15)

      rexp_in  = a(40)+a(41)*init_parms(h,13)**a(42)
      if(rexp_in < blp(16)) rexp_in = blp(16)
      if(rexp_in > bup(16)) rexp_in = bup(16)

      lztwm_in = a(19)+a(20)*init_parms(h,6)**a(21)
      if(lztwm_in < blp(9)) lztwm_in = blp(9)
      if(lztwm_in > bup(9)) lztwm_in = bup(9)

      lzfsm_in = a(25)+a(26)*init_parms(h,8)**a(27)
      if(lzfsm_in < blp(11)) lzfsm_in = blp(11)
      if(lzfsm_in > bup(11)) lzfsm_in = bup(11)

      lzfpm_in = a(22)+a(23)*init_parms(h,7)**a(24)
      if(lzfpm_in < blp(10)) lzfpm_in = blp(10)
      if(lzfpm_in > bup(10)) lzfpm_in = bup(10)

      lzsk_in  = a(34)+a(35)*init_parms(h,11)**a(36)
      if(lzsk_in < blp(14)) lzsk_in = blp(14)
      if(lzsk_in > bup(14)) lzsk_in = bup(14)

      lzpk_in  = a(31)+a(32)*init_parms(h,10)**a(33)
      if(lzpk_in < blp(13)) lzpk_in = blp(13)
      if(lzpk_in > bup(13)) lzpk_in = bup(13)

      pfree_in = a(43)+a(44)*init_parms(h,14)**a(45)
      if(pfree_in < blp(17)) pfree_in = blp(17)
      if(pfree_in > bup(17)) pfree_in = bup(17)

!non-optimized parameters
      a(49) = nmf(1)
      a(50) = tipm(1)
      a(51) = mbase(1)
      a(52) = plwhc(1)
      a(53) = daygm(1)
      a(54) = adimp(1)
      a(55) = pctim(1)
      a(56) = riva
      a(57) = side
      a(59) = rserv
!      print *,'here'


!      print *,elev(h),a(1),a(2),a(3),a(4)
      !set surface pressure for snow17
      pa   = 33.86 * (29.9 - (0.335 * (elev(h)/100.0)) + (0.00022*((elev(h)/100.)**2.4)))

    !set initial state
      uztwc = init_smois(1)
      uzfwc = init_smois(2)
      lztwc = init_smois(3)
      lzfsc = init_smois(4)
      lzfpc = init_smois(5)
      adimc = init_smois(6)

      tprev = 0.
      cs    = 0.

      qs = 0.0
      qg = 0.0
      tci = 0.0
      eta = 0.0
      
  !    print *,'here'
      !need to do model spin up
      do while (spin_up_flag)
	!run model combo over first year (use first full water year,see namelist)
	!first set previous state variables to initial state variables
	uztwc_prev = uztwc
	uzfwc_prev = uzfwc
	lztwc_prev = lztwc
	lzfsc_prev = lzfsc
	lzfpc_prev = lzfpc
	adimc_prev = adimc
	!run first complete water year
	do i = 1,365

	  CALL EXSNOW19(int(dt),int(dt/3600.),day(h,i),month(h,i),year(h,i),&
	    !SNOW17 INPUT AND OUTPUT VARIABLES
			      precip(h,i),tair(h,i),raim_snow17(i),sneqv(i),snow(i),snowh(i),&
	    !SNOW17 PARAMETERS
    !ALAT,SCF,MFMAX,MFMIN,UADJ,SI,NMF,TIPM,MBASE,PXTEMP,PLWHC,DAYGM,ELEV,PA,ADC
  !			    alat,a(1),a(2),a(3),a(4),a(5),a(7),a(8),a(9),&
  !			    a(6),a(10),a(11),elev,pa,adc(1),&
			    alat(h),a(1),mfmax_in,mfmin_in,uadj_in,a(11),a(49),a(50),a(51),&
			    a(12),a(52),a(53),elev(h),pa,adc(1),&
	    !SNOW17 CARRYOVER VARIABLES
			      cs(1),tprev) 

  ! print *,'here 4'
	  call exsac(1,real(dt),raim_snow17(i),tair(h,i),pet(h,i),&
	    !SAC PARAMETERS
  !UZTWM,UZFWM,UZK,PCTIM,ADIMP,RIVA,ZPERC, &
  !REXP,LZTWM,LZFSM,LZFPM,LZSK,LZPK,PFREE, &
  !SIDE,RSERV, &
  !a(12),a(13),a(18),a(23),a(17),a(25),a(21),a(22),a(14),a(16),a(15),a(20),a(19),a(24),a(26),a(27)
  !			a(12),a(13),a(18),a(23),a(17),a(25),a(21),&
  !			a(22),a(14),a(16),a(15),a(20),a(19),a(24),&
  !			a(26),a(27),&
			uztwm_in,uzfwm_in,uzk_in,a(55),a(54),a(56),zperc_in, &
			rexp_in,lztwm_in,lzfsm_in,lzfpm_in,lzsk_in,lzpk_in,pfree_in,&
			a(57),a(58), &
	    !SAC State variables
			    uztwc,uzfwc,lztwc,lzfsc,lzfpc,adimc,&
	    !SAC OUTPUTS
			    qs(i),qg(i),tci(i),eta(i))

	enddo !end model loop

	!check for convergence
	!use 1% diff for all state variables.
	!need to check for zeros...
	uztwc_diff = abs(uztwc-uztwc_prev)
	uzfwc_diff = abs(uzfwc-uzfwc_prev)
	lztwc_diff = abs(lztwc-lztwc_prev)
	lzfsc_diff = abs(lzfsc-lzfsc_prev)
	lzfpc_diff = abs(lzfpc-lzfpc_prev)
	adimc_diff = abs(adimc-adimc_prev)


	cnt = cnt + 1
	!print *,cnt,uztwc_diff,uzfwc_diff,lztwc_diff,lzfsc_diff,lzfpc_diff,adimc_diff
	!print *,cnt,lztwc,lztwc_prev,lztwc_diff
	!print *,cnt,lzfpc,lzfpc_prev,lzfpc_diff

	if(uztwc_diff .lt. 1 .and. uzfwc_diff .lt. 1 .and. lztwc_diff .lt. 1 .and.&
	  lzfsc_diff .lt. 1 .and. lzfpc_diff .lt. 1 .and. adimc_diff .lt. 1) then

	  spin_up_flag = .false.

	endif

      enddo  !end while loop for spin up
!   print *,'state: ',h,uztwc,uzfwc,lztwc,lzfsc,lzfpc,adimc
!  print *,'spun up'
      do i = 1,ll

	CALL EXSNOW19(int(dt),int(dt/3600.),day(h,i),month(h,i),year(h,i),&
	  !SNOW17 INPUT AND OUTPUT VARIABLES
			    precip(h,i),tair(h,i),raim_snow17(i),sneqv(i),snow(i),snowh(i),&
	  !SNOW17 PARAMETERS
	!ALAT,SCF,MFMAX,MFMIN,UADJ,SI,NMF,TIPM,MBASE,PXTEMP,PLWHC,DAYGM,ELEV,PA,ADC
	!			    alat,a(1),a(2),a(3),a(4),a(5),a(7),a(8),a(9),&
	!			    a(6),a(10),a(11),elev,pa,adc(1),&
			  alat(h),a(1),mfmax_in,mfmin_in,uadj_in,a(11),a(49),a(50),a(51),&
			  a(12),a(52),a(53),elev(h),pa,adc(1),&
	  !SNOW17 CARRYOVER VARIABLES
			    cs(1),tprev) 

	! print *,'here 4'
	call exsac(1,real(dt),raim_snow17(i),tair(h,i),pet(h,i),&
	  !SAC PARAMETERS
	!UZTWM,UZFWM,UZK,PCTIM,ADIMP,RIVA,ZPERC, &
	!REXP,LZTWM,LZFSM,LZFPM,LZSK,LZPK,PFREE, &
	!SIDE,RSERV, &
	!a(12),a(13),a(18),a(23),a(17),a(25),a(21),a(22),a(14),a(16),a(15),a(20),a(19),a(24),a(26),a(27)
	!			a(12),a(13),a(18),a(23),a(17),a(25),a(21),&
	!			a(22),a(14),a(16),a(15),a(20),a(19),a(24),&
	!			a(26),a(27),&
		      uztwm_in,uzfwm_in,uzk_in,a(55),a(54),a(56),zperc_in, &
		      rexp_in,lztwm_in,lzfsm_in,lzfpm_in,lzsk_in,lzpk_in,pfree_in,&
		      a(57),a(58), &
	  !SAC State variables
			  uztwc,uzfwc,lztwc,lzfsc,lzfpc,adimc,&
	  !SAC OUTPUTS
			  qs(i),qg(i),tci(i),eta(i))
  !print *,pet(i),a(20),tair(i),precip(i)
!   print *,h,i
        total_tci(i) = total_tci(i) + tci(i)*area_basin(h)/tot_area
        total_qg(i)  = total_qg(i)  + qg(i)*area_basin(h)/tot_area
        t_raim(i)    = t_raim(i) + raim_snow17(i)*area_basin(h)/tot_area
        m_sneqv(i)   = m_sneqv(i) + sneqv(i)*area_basin(h)/tot_area
!    print *,'here?'
      enddo  !end simulation loop
!  print *,'hru',h,tci(1),qg(1),cnt
!  print *,tair(h,2),pet(h,2),precip(h,2),raim_snow17(2)
!  print *,
    enddo  !end num_hru loop

!  print *,'run out'
print *,'area',area_basin(1),tot_area
print *,'total ',total_tci(1),total_qg(1),streamflow(1)
!!!!!!!!!!!!!!!!!!!!!
!
! unit hydrograph
!
!!!!!!!!!!!!!!!!!!!!!!

    dtuh = real(dt/86400.)

    if (a(46) .le. 0.0 .and. a(47) .le. 0.0) THEN
      k = 0
      m = 1
    else
      k = 1
      m = 1000
    end if
    ntau = 0

  !call unit hydrograph routine
    if(a(46) .gt. 0.0) then
      call DUAMEL(total_tci,1,unit_hydro,a(46),a(47),dtuh,ll-1,m,route_tci,k,ntau)
				        !shape,scale

      call calc_rmse(route_tci+total_qg,streamflow,mean_obs,rmse)

      if(trim(metric) .eq. "rmse" .or. trim(metric) .eq. "RMSE") then
	print *,'rmse or mse: ',rmse
	print *,'mean obs:',mean_obs
      else
	print *,'nse: ',rmse*-1
	print *,'mean obs:',mean_obs
      end if
    else
      call calc_rmse(total_tci+total_qg,streamflow,mean_obs,rmse)
      print *,'score: ',rmse
      print *,'mean obs:',mean_obs
    endif
    !format statement for output
    30 FORMAT(I4.4, 3(1x,I2.2),7(F12.4))
    31 FORMAT(I4.4, 3(1x,I2.2),2(F12.4))
    open(unit=45,FILE=trim(model_out),FORM='formatted')
    do i = 1,sim_len
      if(a(46) .gt. 0) then
!	write(unit=45,30) year(1,i),month(1,i),day(1,i),hour(1,i),m_sneqv(i)*1000.,m_precip(i),t_raim(i),m_pet(i),m_tair(i),(route_tci(i)+total_qg(i)),streamflow(i)
        write(unit=45,31) year(1,i),month(1,i),day(1,i),hour(1,i),(route_tci(i)+total_qg(i)),streamflow(i)
      else
!	write(unit=45,30) year(1,i),month(1,i),day(1,i),hour(1,i),m_sneqv(i)*1000.,m_precip(i),t_raim(i),m_pet(i),m_tair(i),(total_tci(i)+total_qg(i)),streamflow(i)
      endif
    enddo
    close(unit=45)

  endif  !end opt if statement

  ! close ASCII output file
  CLOSE(isce)

end program
